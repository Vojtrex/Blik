
Blik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000024  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ec  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000005b  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  00000147  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000171  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000571  00000000  00000000  000001a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000033a  00000000  00000000  00000712  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000198  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00000be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000100  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  0000006e  0000006e  000000e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_3 00000024  00000024  00000024  00000098  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.init    00000012  00000048  00000048  000000bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000006  00000068  00000068  000000dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  00000070  00000070  000000e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000072  00000072  000000e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000074  00000074  000000e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    0000000e  0000005a  0000005a  000000ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000002  00000076  00000076  000000ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	35 c0       	rjmp	.+106    	; 0x6e <__bad_interrupt>
   4:	34 c0       	rjmp	.+104    	; 0x6e <__bad_interrupt>
   6:	0e c0       	rjmp	.+28     	; 0x24 <_etext>
   8:	32 c0       	rjmp	.+100    	; 0x6e <__bad_interrupt>
   a:	31 c0       	rjmp	.+98     	; 0x6e <__bad_interrupt>
   c:	30 c0       	rjmp	.+96     	; 0x6e <__bad_interrupt>
   e:	2f c0       	rjmp	.+94     	; 0x6e <__bad_interrupt>
  10:	2e c0       	rjmp	.+92     	; 0x6e <__bad_interrupt>
  12:	2d c0       	rjmp	.+90     	; 0x6e <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	25 d0       	rcall	.+74     	; 0x68 <main>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <exit>

00000020 <_exit>:
  20:	f8 94       	cli

00000022 <__stop_program>:
  22:	ff cf       	rjmp	.-2      	; 0x22 <__stop_program>

Disassembly of section .text:

0000006e <__bad_interrupt>:
  6e:	c8 cf       	rjmp	.-112    	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_3:

00000024 <__vector_3>:
#include <xc.h>
#include <avr/interrupt.h>

#define LEDPIN1 PB0

ISR(TIM0_OVF_vect) {
  24:	1f 92       	push	r1
  26:	0f 92       	push	r0
  28:	0f b6       	in	r0, 0x3f	; 63
  2a:	0f 92       	push	r0
  2c:	11 24       	eor	r1, r1
  2e:	8f 93       	push	r24
  30:	9f 93       	push	r25
	// Toggle port B pin 4 output state
	PORTB ^= _BV(LEDPIN1);
  32:	98 b3       	in	r25, 0x18	; 24
  34:	81 e0       	ldi	r24, 0x01	; 1
  36:	89 27       	eor	r24, r25
  38:	88 bb       	out	0x18, r24	; 24
}
  3a:	9f 91       	pop	r25
  3c:	8f 91       	pop	r24
  3e:	0f 90       	pop	r0
  40:	0f be       	out	0x3f, r0	; 63
  42:	0f 90       	pop	r0
  44:	1f 90       	pop	r1
  46:	18 95       	reti

Disassembly of section .text.init:

00000048 <init>:

void init (){
		// Set port B output 0 as output
		DDRB = _BV(LEDPIN1);
  48:	81 e0       	ldi	r24, 0x01	; 1
  4a:	87 bb       	out	0x17, r24	; 23

		// Prescale timer to 1/1024th the clock rate
		TCCR0B |= _BV(CS02) | _BV(CS00);
  4c:	83 b7       	in	r24, 0x33	; 51
  4e:	85 60       	ori	r24, 0x05	; 5
  50:	83 bf       	out	0x33, r24	; 51

		// Enable timer overflow interrupt
		TIMSK0 |=_BV(TOIE0);
  52:	89 b7       	in	r24, 0x39	; 57
  54:	82 60       	ori	r24, 0x02	; 2
  56:	89 bf       	out	0x39, r24	; 57
  58:	08 95       	ret

Disassembly of section .text.main:

00000068 <main>:
	
}

int main(void) {
	//Initialize
	init();
  68:	ef df       	rcall	.-34     	; 0x48 <init>
	
	// Enable interrupts
	sei();
  6a:	78 94       	sei
  6c:	ff cf       	rjmp	.-2      	; 0x6c <main+0x4>

Disassembly of section .text.__dummy_fini:

00000070 <_fini>:
  70:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000072 <__funcs_on_exit>:
  72:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000074 <__simulator_exit>:
  74:	08 95       	ret

Disassembly of section .text.exit:

0000005a <exit>:
  5a:	ec 01       	movw	r28, r24
  5c:	0a d0       	rcall	.+20     	; 0x72 <__funcs_on_exit>
  5e:	08 d0       	rcall	.+16     	; 0x70 <_fini>
  60:	ce 01       	movw	r24, r28
  62:	08 d0       	rcall	.+16     	; 0x74 <__simulator_exit>
  64:	ce 01       	movw	r24, r28
  66:	07 d0       	rcall	.+14     	; 0x76 <_Exit>

Disassembly of section .text._Exit:

00000076 <_Exit>:
  76:	d4 df       	rcall	.-88     	; 0x20 <_exit>
